<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>个人学习笔记</title>
    <link>https://blog.emath.top/</link>
    <description>Recent content on 个人学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Oct 2023 19:51:19 +0800</lastBuildDate>
    
        <atom:link href="https://blog.emath.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Node.js开篇</title>
      <link>https://blog.emath.top/post/node/begin/</link>
      <pubDate>Sun, 29 Oct 2023 19:51:19 +0800</pubDate>
      
      <guid>https://blog.emath.top/post/node/begin/</guid>
      
        <description>&lt;p&gt;记录 Node.js 的第一篇博客，主要记录了Node.js的组成与特点。&lt;/p&gt;
&lt;h2 id=&#34;一nodejs简介&#34;&gt;一、Node.js简介&lt;/h2&gt;
&lt;p&gt;Node.js是开源跨平台的JavaScript运行环境。基于chrome V8引擎、Libuv库及第三方模块实现的单线程应用。&lt;/p&gt;
&lt;p&gt;其组成架构图如下图：
&lt;img src=&#34;images/architecture.png&#34; alt=&#34;组成架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体分为3个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Node.js 标准库：&lt;/strong&gt; &lt;br&gt;
这部分由 JavaScript 编写的 Node.js 核心模块，供使用者直接引用，位于源码的lib目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node Bingdings：&lt;/strong&gt;&lt;br&gt;
Node.js 程序的 main 函数入口，对底层模块进行封装为标准库提供C++类接口，是 JavaScript 与底层 C/C++ 沟通的桥梁，由 C++ 编写，位于源码的 src 目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最底层：&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;V8 引擎：&lt;/strong&gt; 用于解析、执行 JavaScrpit 代码的运行环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;libuv：&lt;/strong&gt; 提供底层I/O操作接口，包括文件异步I/O线程池和网络的I/O操作，是整个异步I/O实现的核心，由 C/C++ 编写，位于源码的 deps 目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他 C/C++ 组件和库&lt;/strong&gt;：如 c-ares、http_parser 等，这些依赖提供了对系统底层功能的访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二特点&#34;&gt;二、特点&lt;/h2&gt;
&lt;h3 id=&#34;1-单线程&#34;&gt;1. 单线程&lt;/h3&gt;
&lt;p&gt;传统的 web 服务模型中，大多都使用多线程来解决并发问题。会为每个客户端连接创建一个新的线程，每个线程大约需要消耗2MB内存。理论上，一个8GB内存的服务器可以同时连接最大的用户数为4000个左右。Node.js只有一个主线程，当用户连接时会触发一个内部事件，通过非阻塞I/O、事件驱动机制，实现Node.js程序的并行，一个8GB内存的服务器，可以同时处理4万用户的连接。&lt;/p&gt;
&lt;p&gt;优点：操作系统不再有线程创建、销毁的开销。&lt;/p&gt;
&lt;p&gt;缺点：一个代码某个环节崩溃会导致整个系统的崩溃。&lt;/p&gt;
&lt;h3 id=&#34;2-非阻塞io&#34;&gt;2. 非阻塞I/O&lt;/h3&gt;
&lt;p&gt;Node.js 采用了非阻塞I/O。例如，像是执行了访问数据库的代码后，将立即执行后面的代码，将数据库返回结果交由回调函数处理，从而提高了程序执行效率。当某个I/O执行完成后，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数，为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次处理。&lt;/p&gt;
&lt;p&gt;相反，阻塞模式下，一个线程只能处理一项任务，想要提高吞吐量必须通过多线程的方式。&lt;/p&gt;
&lt;h3 id=&#34;3-事件驱动&#34;&gt;3. 事件驱动&lt;/h3&gt;
&lt;p&gt;在Node.js中，客户端请求建立连接、调用接口等行为会触发相应的事件。
&lt;img src=&#34;images/eventLoop.png&#34; alt=&#34;事件循环&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;31-主线程&#34;&gt;3.1 主线程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;main：启动入口文件，运行主函数。&lt;/li&gt;
&lt;li&gt;event pool：检查是否要进入事件循环。
&lt;ul&gt;
&lt;li&gt;检查其他线程里是否还有待处理事项。&lt;/li&gt;
&lt;li&gt;检查其他任务是否还在进行中（比如计时器、文件读取操作等任务是否完成）。&lt;/li&gt;
&lt;li&gt;有以上情况，进入事件循环，运行其他任务。
事件循环的过程：从timer 至 close callbacks整个流程走完，到event loop检查是否结束，没结束继续走一圈。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;over：所有事件都结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;32-事件循环&#34;&gt;3.2 事件循环&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;images/eventLoopFlow.png&#34; alt=&#34;事件循环流程图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;三nodejs适用场景&#34;&gt;三、Node.js适用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I/O密集型场景&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RestFul API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RPC 服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BBF&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serverless&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微服务&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>基于HUGO搭建个人静态博客</title>
      <link>https://blog.emath.top/post/hugo/hugoblog/</link>
      <pubDate>Fri, 20 Oct 2023 22:29:17 +0800</pubDate>
      
      <guid>https://blog.emath.top/post/hugo/hugoblog/</guid>
      
        <description>&lt;p&gt;记录使用hugo如何快速搭建个人博客在本地运行，记录hugo相关内容作为日后使用及扩展做好准备。&lt;/p&gt;
&lt;h2 id=&#34;一hugo&#34;&gt;一、HUGO&lt;/h2&gt;
&lt;h3 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h3&gt;
&lt;p&gt;HUGO是基于Go编写的静态博客生成器，它能够将我们使用markdown格式写的文本内容快速的转换为HTML文档，并启动web服务，即可在浏览器中展示。&lt;/p&gt;
&lt;h3 id=&#34;2-感受&#34;&gt;2. 感受&lt;/h3&gt;
&lt;p&gt;它吸引我的地方在于其转换的速度，等后面正式上手后，又觉得整个搭建过程很简单很流畅。最让我纠结的地方就在于选主题了，总希望能找到一个简约、清爽的主题，最后还是做了小小的妥协，先完成整个搭建流程，再多写上几篇文章之后再花时间挑选或改造也不迟。&lt;/p&gt;
&lt;h3 id=&#34;3-原理&#34;&gt;3. 原理&lt;/h3&gt;
&lt;p&gt;一个静态博客框架，基于模版，将markdown文档转换为html文档。
&lt;img src=&#34;./images/hugo_schematic.png&#34; alt=&#34;原理&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二快速使用&#34;&gt;二、快速使用&lt;/h2&gt;
&lt;p&gt;参照以下几个步骤，很快便可以实现个人博客的本地服务，总体而言稍微费时的便是选择中意的主题，其次是参照主题示例（exampleSite），配置hugo.toml文件以实现个人博客的个性化配置。当搭建好了个人博客的整体的架子后，往后的工作也只需要关心内容的输出，不断的创建新的文章即可。&lt;/p&gt;
&lt;h3 id=&#34;1-安装hugo&#34;&gt;1. 安装hugo&lt;/h3&gt;
&lt;p&gt;基于macos的安装方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//执行安装命令
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//查看安装结果
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-创建站点&#34;&gt;2. 创建站点&lt;/h3&gt;
&lt;p&gt;创建一个名为blog的站点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//执行命令
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-选择主题&#34;&gt;3. 选择主题&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;主题网址&lt;/a&gt;中选择一个符合自己审美的主题，简单比较了几个，确定了&lt;a href=&#34;https://github.com/xianmin/hugo-theme-jane&#34;&gt;jane&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd blog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//初始化git 仓库
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//安装主题
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/xianmin/hugo-theme-jane themes/jane
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-修改配置&#34;&gt;4. 修改配置&lt;/h3&gt;
&lt;p&gt;将themes/jane/exampleSite/config.toml内容复制到hugo.toml文件中，开始按需更改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; cp themes/jane/exampleSite/config.toml hugo.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-创建文章&#34;&gt;5. 创建文章&lt;/h3&gt;
&lt;p&gt;创建第一篇属于自己的文章&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//执行命令
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new post/title.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以开始专注于写内容了。
当然如果想快速看效果，也可以将themes/jane/exampleSite/content内容复制到 content目录中。&lt;/p&gt;
&lt;h3 id=&#34;6-查看效果&#34;&gt;6. 查看效果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//执行命令
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开网址 http://localhost:1313/ 即可查看效果&lt;/p&gt;
&lt;h2 id=&#34;项目简介&#34;&gt;项目简介&lt;/h2&gt;
&lt;p&gt;参照上述步骤完成了博客的搭建，下面记录一下项目目录结构及关键文件的作用，方便更好的创作及整个博客主题内容的按需扩展。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree -a -L &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .git                   //git init 是生成的与文件夹，存放git版本信息。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .gitignore             //此文件用来制定哪些文件或文件夹不受版本控制，白话点就是不想提交至git仓库点文件在这里指定，后文会用到它。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .gitmodules            //用于管理子模块，比如主题就用到了submodules。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .hugo_build.lock       //用于控制多个hugo实例的并发。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── archetypes             //hugo new xxx.md 依据此目录下的模板生成 xxx.md 的头部信息，像 title、date 等。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── default.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── assets                 //用于存放js、css等资源。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── jsconfig.json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── config                 //用于设置不同环境的配置信息，像不同环境的hugo.toml，启动时需要指定环境，eg: hugo --environment staging。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── staging
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── content                //文章内容目录，hugo new xxx.md 生成文件的位置，创作内容存放于此。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── about.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── post
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── origin.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── data                   //存放数据模版，既可以是静态数据，还可以是一些动态数据，通过URL获取。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── hugo.toml              //全局配置文件，配置整个站点信息。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── i18n                   //多语言配置表，当网址支持多国语言时的变量配置。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── layouts                //存放用来将content、data等资源渲染为完整网站的模板文件。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── public                 //执行hugo命令会将内容渲染为网站，网站内容便存放在public目录下即静态博客。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── resources              //存放缓存的css与images文件。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── _gen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── assets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── static                 //存放静态资源，渲染时会将文件内容复制到public目录下。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── favicon.ico
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── googleddf7a5b53f538ab8.html
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── images
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── themes                 //主题目录，可以存放一个或多个主题。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── jane
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-content&#34;&gt;1. content&lt;/h3&gt;
&lt;p&gt;内容创作目录，当创建文章时就是在此目录下生成相应的markdown文件，当我们的文章中需要引入一些静态文件，比如图片，也可以存放在该目录下，方便文章引用。&lt;/p&gt;
&lt;p&gt;这里对我们有个小小的要求，就是需要掌握markdown的语法，其实也很简单，后面会考虑整理一份关于markdown语法整理的文档，便于自己快速查阅。&lt;/p&gt;
&lt;p&gt;还有一个需要引起思考的话题就是我们在什么地方进行初次创作，然后再将内容贴到该目录下。这里可以是类似飞书文档但是需要进行一些转换，这个能否基于什么工具进行转换为markdown文件，或者直接使用markdown编辑器，像是Typora。&lt;/p&gt;
&lt;h3 id=&#34;2-archetypes&#34;&gt;2. archetypes&lt;/h3&gt;
&lt;p&gt;用来定义创建文章的模板文件夹。当我们使用 &lt;code&gt;hugo new xxx.md&lt;/code&gt; 命令时，便会依据此目录下的模板文件（default.md）生成 xxx.md 文件，此模板文件可以预定一些变量信息。&lt;br&gt;
下面列举一些常用的变量：&lt;br&gt;
详细参照&lt;a href=&#34;https://gohugo.io/content-management/front-matter/#front-matter-variables&#34;&gt;官网内容&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;文章创建时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td&gt;文章描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;draft&lt;/td&gt;
&lt;td&gt;当设置为true时，标记为草稿内容，文章将不会显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;layout&lt;/td&gt;
&lt;td&gt;指定文章选择的布局，否则按照默认顺序选择布局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;weight&lt;/td&gt;
&lt;td&gt;文章权重，从1开始，越小权重越大，排序越靠前&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当我们的博客内容足够丰富时，不同类型的博客可能需要不同的模板，此时我们便可以创建除default.md以外的模板，比如我们可以在该目录下创建了一个名为post.md的模板。&lt;/p&gt;
&lt;p&gt;当我们执行&lt;code&gt;hugo new post/xxx.md&lt;/code&gt;时，hugo会按照以下顺序确定最终模板来创建xxx.md文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;archetypes/post.md&lt;/li&gt;
&lt;li&gt;themes/jane/archetypes/posts.md&lt;/li&gt;
&lt;li&gt;archetypes/default.md&lt;/li&gt;
&lt;li&gt;themes/jane/archetypes/default.md&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果上述几个文件都不存在，就由内置默认模版兜底。&lt;/p&gt;
&lt;h2 id=&#34;四常用命令&#34;&gt;四、常用命令&lt;/h2&gt;
&lt;h3 id=&#34;1-添加文章&#34;&gt;1. 添加文章&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new content path/title.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-构建网站&#34;&gt;2. 构建网站&lt;/h3&gt;
&lt;p&gt;在本地开发与测试阶段，需要用该命令以启动http服务，并支持热加载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-部署网站&#34;&gt;3. 部署网站&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;参数：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    指定 baseURL：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        -b baseURL 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    指定环境变量：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        -e env 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    指定主题：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        -t theme 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    编译草稿文章（draft:true）：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        -D 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    编译已过期文章（expiryDate &amp;lt; now）：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        -E 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    编译未来发布文章（publishDate &amp;gt; now）：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        -F 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;五尾注&#34;&gt;五、尾注&lt;/h2&gt;
&lt;p&gt;这篇文章与我而言其价值在于，先简单记录了基于hugo搭建博客的流程，基于此流程可以更加快速的完成博客的搭建。其次整理了hugo的目录结构，让我对hugo的功能边界及其原理有了初步的认识，为日后能够舒服的使用hugo埋下伏笔，更为日后改善博客主题样式做好了铺垫。当然，我很满意它的构建速度，也想在未来的时候能够去扩展，丰富我的个人博客。希望能够不负当初的愿望，真正实现帮助我学习提升。&lt;/p&gt;
&lt;p&gt;下一篇内容，计划是梳理关于如何将个人博客部署到网站托管平台。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>个人博客缘起</title>
      <link>https://blog.emath.top/post/origin/</link>
      <pubDate>Tue, 17 Oct 2023 22:10:59 +0800</pubDate>
      
      <guid>https://blog.emath.top/post/origin/</guid>
      
        <description>&lt;p&gt;记录自己为什么要写博客及围绕博客这个主题将会做些什么。&lt;/p&gt;
&lt;h2 id=&#34;先提问再起笔&#34;&gt;先提问再起笔&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;为什么要搭建个人博客？&lt;/li&gt;
&lt;li&gt;会不会是三分钟热度？&lt;/li&gt;
&lt;li&gt;考虑好记录哪些内容？&lt;/li&gt;
&lt;li&gt;对于技术选型有哪些思考？&lt;/li&gt;
&lt;li&gt;有哪些期望和目标？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;思而答&#34;&gt;思而答&lt;/h2&gt;
&lt;h3 id=&#34;为什么要搭建个人博客&#34;&gt;为什么要搭建个人博客&lt;/h3&gt;
&lt;p&gt;首先，搭建博客既有内因也有外因。&lt;/p&gt;
&lt;p&gt;外因：当前的就业环境并不理想，竞争压力大，可生活压力更大，失业的囧境不敢想象。也受很多博主文章的影响，像是“不要高估一年的成长，更不要低估十年的成长”。外在环境在不断的牵引着我要去学习，去积累，去沉淀。&lt;/p&gt;
&lt;p&gt;内因：自己本身对研究技术，搭建博客等感兴趣，再者，也不想业余时间沉浸在抖音之类的娱乐上自我消磨。去实践，去将自己学到的，想学的及生活中的感悟记录在册，方便日后查阅。我相信最好的学习方式是输入的同时快速输出实践，否则很难进一步的理解以及容易忘却。&lt;/p&gt;
&lt;p&gt;综上，个人博客的实践应运而生。&lt;/p&gt;
&lt;h3 id=&#34;会不会是三分钟热度&#34;&gt;会不会是三分钟热度&lt;/h3&gt;
&lt;p&gt;确实，很多时候我是三分钟热度，业余生活中容易被其他事情影响，而放弃原本想坚持的事情。我也想通过此方式，告诫自己要养成坚持初心的习惯。不断学习，不断实践，不断记录。&lt;/p&gt;
&lt;h3 id=&#34;考虑好记录哪些内容&#34;&gt;考虑好记录哪些内容&lt;/h3&gt;
&lt;p&gt;目前，想记录内容总体分为三大类吧，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术实践&lt;/li&gt;
&lt;li&gt;学习笔记&lt;/li&gt;
&lt;li&gt;生活感悟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望养成边学边练边输出的习惯，助力自己更好的学习各项技能。&lt;/p&gt;
&lt;h3 id=&#34;对于技术选型有哪些思考&#34;&gt;对于技术选型有哪些思考&lt;/h3&gt;
&lt;p&gt;目前选择了静态博客的方式，因为想快速看到效果，而不是自己花时间去从头搭建一套CMS，当然未来有可能去做这件事。通过hugo快速生成静态页面，通过GitHub Action 串联 GitHub page 的方式，实现一键式部署的方式，边玩边学的心态。&lt;/p&gt;
&lt;h3 id=&#34;有哪些期望和目标&#34;&gt;有哪些期望和目标&lt;/h3&gt;
&lt;p&gt;至于期望与目标，短期来看，就想通过这样一种方式养成持续学习的习惯，达到深入理解知识点的目的。明确目标，对系统架构的理解、对基础知识的掌握、对典型应用场景的技术选型有一定的梳理与记录。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;锲而舍之，朽木不折；锲而不舍，金石可镂。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>实现个人静态博客的全网访问</title>
      <link>https://blog.emath.top/post/hugo/deployblog/</link>
      <pubDate>Sun, 22 Oct 2023 20:37:40 +0800</pubDate>
      
      <guid>https://blog.emath.top/post/hugo/deployblog/</guid>
      
        <description>&lt;p&gt;记录通过Vercel及GitHub Pages两种方式实现静态博客的部署及实现网站被搜索引擎收录，是上文&lt;a href=&#34;../hugoblog/&#34;&gt;基于HUGO搭建个人静态博客&lt;/a&gt;的后续工作。&lt;/p&gt;
&lt;h2 id=&#34;一背景&#34;&gt;一、背景&lt;/h2&gt;
&lt;p&gt;写博客的初衷，首先是方便自己查阅其次是可以给大家提供参考，所以需要将自己在本地搭建好的服务部署至云平台，方便随时访问。&lt;/p&gt;
&lt;p&gt;首先想到的是GitHub Pages，从Github源码仓库中直接创建网站，不过考虑到国内访问GitHub Pages的速度等原因，它无法作为我的首选。其次是部署到自己的云服务器上，但存在配置低且资源有限的情况。最后选择了免费网站托管平台Vercel。&lt;/p&gt;
&lt;h2 id=&#34;二基于vercel部署静态博客&#34;&gt;二、基于Vercel部署静态博客&lt;/h2&gt;
&lt;h3 id=&#34;1-vercel简介&#34;&gt;1. Vercel简介&lt;/h3&gt;
&lt;p&gt;Vercel是一个云服务平台，支持静态和动态网站的部署和上线，当集成GitHub后便可实现当代码推送至GitHub仓库后，自动部署上线网站。具有以下优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;个人版免费，并提供免费域名及Https证书。&lt;/li&gt;
&lt;li&gt;内置黑盒CI/CD，无需过多配置即可实现自动集成部署。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-准备工作&#34;&gt;2. 准备工作&lt;/h3&gt;
&lt;p&gt;将自己在本地&lt;a href=&#34;../hugoblog/&#34;&gt;基于HUGO搭建个人静态博客&lt;/a&gt;项目blog推送至GitHub仓库。
具体步骤如下：&lt;br&gt;
&lt;strong&gt;1. 登陆GitHub创建一个私有仓库blog。&lt;/strong&gt;&lt;br&gt;
拿到仓库地址:https://github.com/youself/blog.git&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. .gitignore文件中添加public目录。&lt;/strong&gt; &lt;br&gt;
public目录作为hugo转换生成的结果，不能作为源码提交至Github。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 删除themes/jane目录下的.git文件。&lt;/strong&gt;&lt;br&gt;
jane是从Github上clone下来的，会有.git文件，推送代码时内层目录有.git文件，会被识别为另一个git仓库并不会上传该目录只会上传一个软链文件，这样会影响Vercel拉取主题信息从而导致转换失败。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 到本地blog项目目录下，依次执行执行以下命令，推送代码至远程仓库。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 1.添加远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add remote origin https://github.com/youself/blog.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 2.拉取远程代码（创建时可能会生成一个 README.md 文件）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 3.本地代码添加到暂存区
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 4.提交代码
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;第一次提交&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 5.推送至远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-实践步骤&#34;&gt;3. 实践步骤&lt;/h3&gt;
&lt;h4 id=&#34;基本步骤&#34;&gt;基本步骤：&lt;/h4&gt;
&lt;p&gt;按照下面步骤即可完成blog在Vercel平台的部署，Vercel会自动给我们分配域名，使用提供的网址即可访问。&lt;br&gt;
&lt;strong&gt;1. 注册 &lt;a href=&#34;https://vercel.com/signup&#34;&gt;Vercel&lt;/a&gt; 账号&lt;/strong&gt;&lt;br&gt;
选择 Hobby 类型 &amp;gt; 输入名称 &amp;gt; 下一步 &amp;gt; 使用GitHub账号认证即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 新建项目&lt;/strong&gt;&lt;br&gt;
Add New &amp;gt; Project&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 导入Git仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 导入知道项目blog&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 配置项目&lt;/strong&gt;&lt;br&gt;
选择框架Hugo &amp;gt; 构建命令 &lt;code&gt;hugo&lt;/code&gt; &amp;gt; 输出目录public &amp;gt; 环境变量添加HUGO_VERSION:(hugo version 结果) &amp;gt; 部署&lt;br&gt;
&lt;img src=&#34;./images/vercel_config.png&#34; alt=&#34;Vercel配置&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用自己域名&#34;&gt;使用自己域名：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. 选择刚刚部署的项目&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. 点击Domain进入Domain设置页面&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. 输入事先准备的CNAME类型的域名&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4. 点击Add&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完成上述步骤即可使用自己的域名访问Vercel上部署的博客。&lt;/p&gt;
&lt;h3 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h3&gt;
&lt;p&gt;至此，我们已经完成个人博客的云部署任务，也实现了个人静态博客的全网访问。简单上手体验了Vercel不禁想给它点赞，主要在以下几个方面，一是部署简单，二是访问快速，最后它还完全免费。&lt;/p&gt;
&lt;h2 id=&#34;三基于github-pages部署静态博客&#34;&gt;三、基于GitHub Pages部署静态博客&lt;/h2&gt;
&lt;h3 id=&#34;1-选择原因&#34;&gt;1. 选择原因&lt;/h3&gt;
&lt;p&gt;既然已经选择了Vercel，理论上云部署的任务已经完成，为什么又选择了GitHub Pages？&lt;/p&gt;
&lt;p&gt;是的，Vercel已经帮我实现了目标且很方便，选择GitHub Pages是因为GitHub Action，我没有用过它。之前接触CI/CD的流水线是基于其他仓库及其他工具，所以我想利用这个机会亲自实践感受一下GitHub Action。&lt;/p&gt;
&lt;h3 id=&#34;2-实践步骤&#34;&gt;2. 实践步骤&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 创建一个以{用户名}.github.io命名的公有仓库。&lt;/strong&gt; &lt;br&gt;
该仓库不能选择私有仓库否则将无法访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 创建GitHub个人访问令牌。&lt;/strong&gt;&lt;br&gt;
登陆GitHub &amp;gt; 点击用户头像 &amp;gt; Settings &amp;gt; Developer Settings &amp;gt; Personal access tokens &amp;gt; Tokens &amp;gt; Generate new token (classic)&amp;gt; 输入密码 &amp;gt; 输入 Token name 、 Expiration &amp;gt; 勾选repo及workflow权限 &amp;gt;  Generate token &amp;gt; 复制&lt;strong&gt;令牌&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 为私有仓库blog创建Action secrets&lt;/strong&gt;&lt;br&gt;
打开私有库 &amp;gt; Settings &amp;gt; Secrets and variables &amp;gt; Actions &amp;gt; New repository Secrets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name : ACCESS_TOKEN&lt;/li&gt;
&lt;li&gt;Secret : 令牌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 Add secret 即可生成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 为私有仓库blog创建Action&lt;/strong&gt;&lt;br&gt;
打开私有库 &amp;gt; Action &amp;gt; New workflow &amp;gt;  set up a workflow yourself&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 编辑main.yml文件并提交&lt;/strong&gt;&lt;br&gt;
可以给该文件重命名，下面为参考模板。将模板内容修改好后提交，就会在yourname.github.io仓库生成一个新的分支gh-pages，并将转换的public目录下的文件推送至该分支。以后每次往私有库main分支提交代码都会触发该事件，将最新生成的博客更新至yourname.github.io仓库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;GitHub Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         - &lt;span style=&#34;color:#ae81ff&#34;&gt;main &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 博客根目录的默认分支，这里是main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;pull_request&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-20.04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;concurrency&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;group&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ github.workflow }}-${{ github.ref }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;submodules&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Setup Hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-hugo@v2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.119.0&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 填写你的hugo版本，可用hugo version查看&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;extended&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;# 如果你使用的不是extended版本的hugo，将true改为false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;if&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }} &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 注意填写main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;personal_token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.ACCESS_TOKEN}}&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 如果secret取了其他名称，将ACCESS_TOKEN替换掉&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;external_repository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;yourname/yourname.github.io&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 填写远程仓库，不一定是这个格式，按照自己的情况写 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;publish_dir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;#cname: www.example.com        # 填写你的自定义域名。如果没有用自定义域名，注释掉这行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;6. 配置yourname.github.io仓库GitHub Pages&lt;/strong&gt;&lt;br&gt;
打开公有库 &amp;gt; Settings &amp;gt; Pages &amp;gt; Branch 选择gh-pages 分支 &amp;gt; 点击Visit site 即可访问基于GitHub Pages 托管的博客网站。&lt;/p&gt;
&lt;h3 id=&#34;3-总结&#34;&gt;3. 总结&lt;/h3&gt;
&lt;p&gt;参照上述步骤完成了基于GitHub Pages托管博客网站。以后每次往blog私有库mian分支推送代码都可以自动实现上述2个网站内容的自动更新，至此我的个人博客主流程也就告一段落了。&lt;/p&gt;
&lt;h2 id=&#34;四关联搜索引擎&#34;&gt;四、关联搜索引擎&lt;/h2&gt;
&lt;p&gt;上面步骤已经实现了输入网址访问博客，如果希望能大家通过搜索引擎检索到自己的博客，那么还需要让搜索引擎收录我们的博客。下面会选择谷歌和百度两种方式。&lt;/p&gt;
&lt;h3 id=&#34;1-谷歌收录&#34;&gt;1. 谷歌收录&lt;/h3&gt;
&lt;p&gt;查看&lt;a href=&#34;https://gs.statcounter.com/search-engine-market-share&#34;&gt;statcounter网站&lt;/a&gt;可以看到过去一年全球浏览器市场份额，谷歌是遥遥领先的。所以谷歌理所当然成了首选。&lt;/p&gt;
&lt;p&gt;下面会整理谷歌收录步骤：&lt;br&gt;
&lt;strong&gt;1. &lt;a href=&#34;https://search.google.com/search-console/welcome?hl=zh-CN&#34;&gt;打开谷歌收录网站&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 选择网址前缀配置方式&lt;/strong&gt;&lt;br&gt;
输入博客网址 &amp;gt; 继续&lt;br&gt;
&lt;img src=&#34;images/google_config.png&#34; alt=&#34;配置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 网站验证&lt;/strong&gt;&lt;br&gt;
需要验证该网站是我们的，有多种验证方式，我们选择HTML文件的方式。&lt;br&gt;
下载此文件 &amp;gt; 保存至blog/static目录下&lt;br&gt;
当执行hugo转换命令时就会将该文件转换至public目录下，我们就达到了验证的目的。&lt;br&gt;
&lt;img src=&#34;images/google_checking.png&#34; alt=&#34;验证&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 提交站点地图&lt;/strong&gt;&lt;br&gt;
Sitemaps &amp;gt; 输入 sitemap.xml&lt;br&gt;
sitemap.xml 为站点地图，hugo转换生成的public目录下有该文件。&lt;br&gt;
&lt;img src=&#34;images/google_sitemap.png&#34; alt=&#34;站点地图&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 收录成功&lt;/strong&gt;&lt;br&gt;
一段时间后可以通过谷歌检索site:yourwebsite.com来确定收录情况及查阅浏览情况。&lt;/p&gt;
&lt;h3 id=&#34;2-百度收录&#34;&gt;2. 百度收录&lt;/h3&gt;
&lt;p&gt;国内更多的是使用百度，所以第二个选择了被百度收录。
百度收录步骤与谷歌类似其中&lt;a href=&#34;https://ziyuan.baidu.com/site/index&#34;&gt;百度收录网站&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;五尾注&#34;&gt;五、尾注&lt;/h2&gt;
&lt;p&gt;结合&lt;a href=&#34;post/hugo/hugoblog/&#34;&gt;上篇文章&lt;/a&gt;已经完成个人博客服务的完整流程，这个过程让我意识到当前云服务的强大，切实感受到了在不用关心底层架构的便利性。持续集成与持续部署带来的体验便是编码人员或是创作人员，只需要编写代码提交代码，其他的交由CI/CD流水线帮我们编译、部署、上线。&lt;/p&gt;
&lt;p&gt;接下来的创作灵感，也可以基于强大的云平台助力自己的idea快速实现，配置固定的流水线帮助自己快速集成发布减少重复性工作。既然关于“博客”话题的整理流程已经梳理完毕，关于使用的细节等内容可能短期内不再梳理，得等到合适的时机。&lt;/p&gt;
&lt;p&gt;最后附上博客部署的简略流程：&lt;br&gt;
&lt;img src=&#34;images/flow.png&#34; alt=&#34;流程&#34;&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于</title>
      <link>https://blog.emath.top/about/</link>
      <pubDate>Tue, 17 Oct 2023 21:38:52 +0800</pubDate>
      
      <guid>https://blog.emath.top/about/</guid>
      
        <description>&lt;h2 id=&#34;博客目的&#34;&gt;博客目的&lt;/h2&gt;
&lt;p&gt;记录自己感兴趣的技术内容与个人实践内容。希望通过博客的方式，养成记笔记的习惯，加深自己对技术的理解。&lt;/p&gt;
&lt;p&gt;不高估自己一年的成长，也不低估自己十年的成长。不断积累以减缓自己被社会淘汰的速度，生易，活易，生活不易。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
